

Manual de Líneas de Comando para Gemini Security Monitor

1. Introducción

Este manual describe cómo interactuar con las funcionalidades de backend de Gemini Security Monitor a través de la línea de comandos (CLI). 
La aplicación principal de Gemini Security Monitor es una interfaz gráfica de usuario (GUI). Para utilizar las funcionalidades descritas aquí desde la CLI,
se requeriría un script de interfaz de línea de comandos (CLI) dedicado que interactúe con los módulos de backend existentes (como 'ai_integration.py', 'system_monitor.py', etc.).

Este manual es una guía conceptual para un futuro desarrollo de la CLI.

2. Requisitos

Para ejecutar cualquier script de CLI que interactúe con Gemini Security Monitor, necesitarás:
- Python 3.x instalado.
- Todas las dependencias del proyecto instaladas (ej. 'requests', 'sqlite3', 'tkinter' si el script CLI lo requiere para alguna inicialización, aunque idealmente no).

3. Uso Básico (Conceptual)

Asumiendo la existencia de un script CLI llamado 'security-monitor-cli.py' en la raíz del proyecto 'gemini-security-monitor', el uso general sería:

python security-monitor-cli.py <comando> [opciones]

4. Comandos Disponibles (Conceptual)

A continuación, se detallan los comandos y opciones que un script CLI podría ofrecer para interactuar con las funcionalidades de Gemini Security Monitor.

4.1. Gestión de Monitorización

- Iniciar la monitorización de seguridad.
  Comando: monitor start
  Descripción: Inicia el bucle de monitorización de seguridad en segundo plano. Requiere que las APIs estén conectadas.

- Detener la monitorización de seguridad.
  Comando: monitor stop
  Descripción: Detiene el bucle de monitorización de seguridad.

- Mostrar el estado de la monitorización.
  Comando: monitor status
  Descripción: Muestra si la monitorización está activa o inactiva.

4.2. Conexión a APIs y Nube

- Configurar las claves de API para Gemini y OpenAI.
  Comando: api set-keys --gemini <tu_clave_gemini> --openai <tu_clave_openai>
  Descripción: Almacena las claves de API para futuras conexiones. Las claves deben ser proporcionadas como argumentos.

- Conectar a las APIs de IA configuradas.
  Comando: api connect
  Descripción: Intenta establecer conexión con las APIs de IA utilizando las claves configuradas.

- Conectar a los servicios en la nube (Supabase, Google Cloud).
  Comando: cloud connect
  Descripción: Simula o intenta establecer conexión con los servicios en la nube.

4.3. Gestión de Aplicaciones de Seguridad

- Activar o desactivar una aplicación de seguridad específica.
  Comando: app toggle <nombre_app> --status <on|off>
  Descripción: Cambia el estado de monitorización de una aplicación.
  Ejemplos:
    app toggle windows_defender --status on
    app toggle cloudflare_warp --status off
  Aplicaciones disponibles: windows_defender, file_explorer, cloudflare_warp, crowdsec

4.4. Gestión de Integridad de Archivos

- Calcular los hashes de los archivos en el directorio C:\www\gemini-security-monitor.
  Comando: integrity calculate-hashes
  Descripción: Genera una línea base de hashes para verificar la integridad futura.

- Verificar la integridad de los archivos en el directorio C:\www\gemini-security-monitor.
  Comando: integrity verify-integrity
  Descripción: Compara los hashes actuales con la línea base para detectar modificaciones.

4.5. Administración del Sistema

- Crear un punto de restauración del sistema.
  Comando: system create-restore-point <nombre_punto>
  Descripción: Crea un punto de restauración de Windows con el nombre especificado.

4.6. Seguridad de Puertos

- Ejecutar un escaneo de puertos.
  Comando: ports scan
  Descripción: Realiza un escaneo de puertos en el sistema.

4.7. Gestión de Usuarios y Privilegios

- Listar usuarios locales, grupos y sus privilegios.
  Comando: users list-privileges
  Descripción: Muestra información detallada sobre los usuarios y sus permisos en el sistema.

5. Ejemplos de Uso (Conceptual)

- Iniciar la monitorización después de configurar las claves de API:
  python security-monitor-cli.py api set-keys --gemini "tu_clave_aqui" --openai "tu_otra_clave_aqui"
  python security-monitor-cli.py api connect
  python security-monitor-cli.py monitor start

- Activar la monitorización de Cloudflare WARP:
  python security-monitor-cli.py app toggle cloudflare_warp --status on

- Verificar la integridad del proyecto:
  python security-monitor-cli.py integrity verify-integrity

- Crear un punto de restauración antes de una actualización:
  python security-monitor-cli.py system create-restore-point "Antes de Actualizacion X"

--- FIN DEL MANUAL ---
